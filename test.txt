pipeline {
  agent {
    label params.AGENT == "any" ? "" : params.AGENT 
  }
  environment {
    VERSION = "${env.BUILD_ID}"
    job = "${env.JOB_NAME}"
    dopsemail = "devops@spantechnologyservices.com"
    devemail = "w9team@spantechnologyservices.com"
    NEXUS_URL = "spanartifacts.spanllc.com"
  }

  parameters {
    choice(
      name: "AGENT", 
      choices: ["N/A", "Build-test"],
      description: "Select your Build Environment"
    ) 

    string(
      name: 'Trigger_Repo',
      description: "Trigger_Repo"
    )

    string(
      name: 'Trigger_Branch',
      description: "Trigger_Branch"
    )    

    cascadeChoiceParameter(
      name: 'Application',
      description: 'Select the Application from the Dropdown List',
      referencedParameters: 'Env',
      script: [
        $class: 'GroovyScript',
        fallbackScript: [
          classpath: [], 
          sandbox: false, 
          script: "return['Could not get Application from Env Param']"
        ],
        script: [
          classpath: [], 
          sandbox: false, 
          script: '''
            if (Env.equals('lead-mgmt')) {
              return ['lead-management-api', 'lead-management-client', 'lead-management-user-portal']
            }
          '''
        ] 
      ]
    )

    string(
      name: 'tags',
      description: "Enter Docker tag number"
    )
  }

  stages {
    stage('Git Clone') {
      steps {
        script {
          sh "pwd"
          echo "${env.Trigger_Repo}','${env.Trigger_Branch}'"
          git credentialsId: 'githubDops', branch: "${env.Trigger_Branch}",  url: "${env.Trigger_Repo}"
        }
      }
    }

    stage('.env copy') {
      steps {
        script {   
          sh "cp -r /home/ubuntu/.envs/lead-mgmt/Sprint/lm-api-env  /home/ubuntu/jenkins-slave/workspace/DevOps/lm-test/lead-management-api/.env "
          sh "cp -r /home/ubuntu/.envs/lead-mgmt/Sprint/lm-client-env  /home/ubuntu/jenkins-slave/workspace/DevOps/lm-test/lead-management-client/.env"
          sh "cp -r /home/ubuntu/.envs/lead-mgmt/Sprint/lm-portal-env  /home/ubuntu/jenkins-slave/workspace/DevOps/lm-test/lead-management-user-portal/.env"    
        }
      }
    }

    stage('Docker Build') {
      steps {
        script {
          dir("${env.WORKSPACE}") {
            sh "sudo docker build -t ${Application.toLowerCase()}:${tags} ./${Application} --no-cache"
          }
        }
      }
    }

    stage('Nexus Login') {
      steps {
        echo "Logging Into The Nexus Docker Repo"
        script {
          withCredentials([usernamePassword(credentialsId: 'spanartifacts1', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
            sh "echo ${NEXUS_PASS} | docker login --username ${NEXUS_USER} --password-stdin ${NEXUS_URL}"
          }
        }
      }
    }

    stage('Docker Push to Nexus') {
      steps {
        script {
          sh "docker tag ${Application.toLowerCase()}:${tags} ${NEXUS_URL}/${Application.toLowerCase()}:${tags}"
          sh "docker push ${NEXUS_URL}/${Application.toLowerCase()}:${tags}" 
        }
      }
    }

    stage('Stop and Remove the Docker Container') {
      steps {
        script {
          sh "sudo docker stop ${Application.toLowerCase()}"
          sh "sudo docker rm ${Application.toLowerCase()}"
        }
      }
    }

    stage('Run the Docker') {
      steps {
        script {
          switch ("${Application.toLowerCase()}") {
            case "lead-management-api":
              sh "sudo docker run -itd --name ${Application.toLowerCase()} -p 4005:4005 ${Application.toLowerCase()}:${tags}"
              break
            case "lead-management-client":
              sh "sudo docker run -itd --name ${Application.toLowerCase()} -p 4006:4006 ${Application.toLowerCase()}:${tags}"
              break
            case "lead-management-user-portal":
              sh "sudo docker run -itd --name ${Application.toLowerCase()} -p 4007:4007 ${Application.toLowerCase()}:${tags}"
              break
            default:
              echo "Unknown application: ${Application.toLowerCase()}"
              break
          }
        }
      }
    }

    stage('Docker-List') {
      steps {
        script {
          sh "pwd"
          sh "sudo docker ps -a"
        }
      }
    }
  }
}
